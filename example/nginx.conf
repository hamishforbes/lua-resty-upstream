events {
    worker_connections  1024;
}

error_log  logs/error.log error;

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" [$request_time]';

    access_log  logs/access.log  main;
    resolver 8.8.8.8;

    lua_shared_dict my_upstream 1m;
    lua_shared_dict upstream_stat 1m;
    lua_socket_log_errors off;

    lua_package_path "/path/to/lua-resty-http/lib/?.lua;;";

    init_by_lua '
        require("cjson")

        Upstream_Socket  = require("resty.upstream.socket")
        Upstream_HTTP = require("resty.upstream.http")
        Upstream_Api = require("resty.upstream.api")

        upstream, configured = Upstream_Socket:new("my_upstream")
        api = Upstream_Api:new(upstream)
        http_upstream = Upstream_HTTP:new(upstream)

        if not configured then -- Only reconfigure on start, shared mem persists across a HUP
            api:create_pool({id = "primary", timeout = 100, read_timeout = 10000, keepalive_pool = 256, keepalive_timeout = (120*1000)})
            stat:set("primary", 0)
            
            api:add_host("primary", { host = "127.0.0.1", port = "81", weight = 10, healthcheck = true})
            api:add_host("primary", { host = "127.0.0.1", port = "82",  weight = 10, healthcheck = true})
            stat:set("1", 0)
            stat:set("2", 0)
 
            api:create_pool({id = "dr", timeout = 100, priority = 10, read_timeout = 60000})
            api:add_host("dr", { host = "10.10.10.10", port = "81", weight = 10})
            api:add_host("dr", { host = "10.10.10.10", port = "82",  weight = 10})

        end

    ';

    init_worker_by_lua 'http_upstream:init_background_thread()';

    server {
        listen 80;
        server_name lua-load-balancer;

        location / {
            content_by_lua_file /path/to/lua-resty-upstream/example/load-balancer.lua;
            log_by_lua '
                local stat = ngx.shared.upstream_stat
                local host = ngx.ctx.host
                local pool = ngx.ctx.pool
                stat:incr(host.id, 1)
                stat:incr(pool.id, 1)
                upstream:post_process()
            ';
        }

    }

    server {
        listen 81;
        location / {
            echo 'foo';
        }
    }

    server {
        listen 82;
        location / {
            echo 'bar';
        }
    }

    server {
        listen 8080;
        server_name api;

        location = /stat {
            default_type text/plain;
            content_by_lua '
                local stat = ngx.shared.upstream_stat
                local pools, err = api:get_pools()
                local return_table = {pool = {}}
                for pool_id in pairs(pools) do
                    return_table.pool[pool_id] = {requests = stat:get(pool_id), hosts = {}}
                    for _, host in ipairs(pools[pool_id].hosts) do
                        table.insert(return_table.pool[pool_id].hosts, {id = host.id, requests = stat:get(host.id)})
                    end
                end
                ngx.print(cjson.encode(return_table))
            ';
        }

        location = /pools {
            default_type text/plain;
            content_by_lua '
                local pools, err = api:get_pools()
                if not pools then
                    ngx.print(cjson.encode(err))
                    ngx.status = 500
                else
                    ngx.print(cjson.encode(pools))
                end
            ';
        }

        location ~ ^/down_host/([^[/]+)/([^[/]+)$ {
            content_by_lua '
                local host = ngx.var[2]
                local pool = ngx.var[1]
                local ok, err = api:down_host(pool, host)
                if not ok then
                    ngx.print(cjson.encode(err))
                    ngx.status = 500
                end
            ';
        }
        location ~ ^/up_host/([^[/]+)/([^[/]+)$ {
            content_by_lua '
                local host = ngx.var[2]
                local pool = ngx.var[1]
                local ok, err = api:up_host(pool, host)
                if not ok then
                    ngx.print(cjson.encode(err))
                    ngx.status = 500
                end
            ';
        }
    }
}

